using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.ResourceGraph;
using Azure.ResourceManager.ResourceGraph.Models;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using ScoreCard.Domain.EntitiesAzureResourceExplorer;
using ScoreCard.Domain.InterfacesAzureResourceExplorer;
using ScoreCard.Domain.QueryUtils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ScoreCard.Infrastructure.AzureResourceExplorer
{
    public class SecurityRecommendationsAZRRepository : ISecurityRecommendationsAZR
    {
        private readonly ILogger<SecurityRecommendationsAZRRepository> _logger;


        public SecurityRecommendationsAZRRepository(ILogger<SecurityRecommendationsAZRRepository> logger)
        {
            _logger = logger;
        }

        public async Task<List<SecurityRecommendationsAZR>> GetAsync(string subscriptionId, string tenantId, string applicationId, string clientSecret)
        {
            try
            {
                var client = new ArmClient(new ClientSecretCredential(tenantId, applicationId, clientSecret));
                //QueryUtilsAZR queryText = new QueryUtilsAZR();
                string strQuery = $"securityresources\r\n        | where type == \"microsoft.security/assessments\" or type == \"microsoft.security/assessments/governanceassignments\"\r\n        | where subscriptionId == \"{subscriptionId}\"\r\n        | extend source = iff(type == \"microsoft.security/assessments\", trim(' ', tolower(tostring(properties.resourceDetails.Source))), dynamic(null))\r\n        | extend resourceId = iff(type == \"microsoft.security/assessments\", trim(\" \", tolower(tostring(case(source =~ \"azure\", properties.resourceDetails.Id,\r\n            (type == \"microsoft.security/assessments\" and (source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)))), properties.resourceDetails.Id,\r\n            (type == \"microsoft.security/assessments\" and (source =~ \"gcp\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)))), properties.resourceDetails.Id,\r\n            source =~ \"aws\", properties.resourceDetails.AzureResourceId,\r\n            source =~ \"gcp\", properties.resourceDetails.AzureResourceId,\r\n            extract(\"^(.+)/providers/Microsoft.Security/assessments/.+$\",1,id)\r\n            )))), dynamic(null))\r\n        | extend isAssessment = iff(type == \"microsoft.security/assessments\", 1, 0)\r\n        | extend isAssignment = iff(type == \"microsoft.security/assessments/governanceassignments\", 1, 0)\r\n        | extend assessmentId = iff(type == \"microsoft.security/assessments\", id, dynamic(null))\r\n        | extend assignedResourceId = iff(type == \"microsoft.security/assessments/governanceassignments\", tostring(properties.assignedResourceId), dynamic(null))\r\n        | extend idForSummarize = iff(isAssessment == 1, tolower(assessmentId), tolower(assignedResourceId))\r\n        | extend assessmentKey = iff(type == \"microsoft.security/assessments\", name, dynamic(null))\r\n        | extend assessmentDisplayName = iff(type == \"microsoft.security/assessments\", tostring(properties.displayName), dynamic(null))\r\n        | extend displayName = assessmentDisplayName\r\n        | project-away assessmentDisplayName\r\n        | extend statusCode = iff(type == \"microsoft.security/assessments\", tostring(properties.status.code), dynamic(null))\r\n        | extend isUnhealthy = iff(statusCode == \"Unhealthy\", 1, 0)\r\n        | extend maturityLevel = iff(type == \"microsoft.security/assessments\", case(\r\n                    isnull(properties.metadata.preview), \"GA\",\r\n                    tobool(properties.metadata.preview), \"Preview\",\r\n                    \"GA\"), dynamic(null))\r\n        | extend statusPerInitiative = todynamic(properties.statusPerInitiative)\r\n        | extend regexResourceId = iff(type == \"microsoft.security/assessments\", extract_all(@\"/providers/([^/]+)(?:/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?)?/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?$\", resourceId), dynamic(null))\r\n        | extend regexResourceType = iff(type == \"microsoft.security/assessments\", regexResourceId[0], dynamic(null))\r\n        | extend providerName = iff(type == \"microsoft.security/assessments\", regexResourceType[0], dynamic(null))\r\n        | extend mainType = iff(type == \"microsoft.security/assessments\", case(regexResourceType[1] !~ \"\", strcat(\"/\",regexResourceType[1]), \"\"), dynamic(null))\r\n        | extend extendedType = iff(type == \"microsoft.security/assessments\", case(regexResourceType[2] !~ \"\", strcat(\"/\",regexResourceType[2]), \"\"), dynamic(null))\r\n        | extend resourceType = iff(type == \"microsoft.security/assessments\", case(regexResourceType[3] !~ \"\", strcat(\"/\",regexResourceType[3]), \"\"), dynamic(null))\r\n        | extend additionalType = iff(type == \"microsoft.security/assessments\", case(regexResourceType[4] !~ \"\", strcat(\"/\",regexResourceType[4]), \"\"), dynamic(null))\r\n        | extend typeFullPath = iff(type == \"microsoft.security/assessments\", case(\r\n                array_length(split(resourceId, '/')) == 3, 'subscription',\r\n                array_length(split(resourceId, '/')) == 5, 'resourcegroups',\r\n                (type == \"microsoft.security/assessments\" and (source =~ \"gcp\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)))) or (type == \"microsoft.security/assessments\" and (source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)))), tolower(strcat(providerName, mainType, \"/\", tostring(properties.additionalData.ResourceProvider), tostring(properties.additionalData.ResourceType))),\r\n                strcat(providerName, mainType, extendedType, resourceType, additionalType)), dynamic(null))\r\n        | extend severity = iff(type == \"microsoft.security/assessments\", tostring(properties.metadata.severity), dynamic(null))\r\n| where ((severity =~ \"High\")) or (isAssessment == 0) or ((severity =~ \"Medium\")) or ((severity =~ \"Low\"))\r\n        | extend severityNumber = iff(type == \"microsoft.security/assessments\", case(\r\n                    severity == \"Low\", 1,\r\n                    severity == \"Medium\", 2,\r\n                    severity == \"High\", 3,\r\n                    dynamic(null)\r\n                ), dynamic(null))\r\n        | extend environment = iff(type == \"microsoft.security/assessments\", case(\r\n                    source == \"azure\" or source == \"onpremise\", \"Azure\",\r\n                    source == \"aws\", \"AWS\",\r\n                    source == \"gcp\", \"GCP\",\r\n                    dynamic(null)\r\n                ), dynamic(null))\r\n| where ((environment =~ \"AWS\" or environment =~ \"Azure\" or environment =~ \"GCP\")) or (isAssessment == 0)\r\n        | extend dueDate = iff(type == \"microsoft.security/assessments/governanceassignments\", todatetime(properties.remediationDueDate), dynamic(null))\r\n        | extend eta = iff(type == \"microsoft.security/assessments/governanceassignments\", todatetime(properties.remediationEta.eta), dynamic(null))\r\n        | extend govCompletionStatus = iff(type == \"microsoft.security/assessments/governanceassignments\", case(\r\n                            isnull(todatetime(properties.remediationDueDate)), \"NoDueDate\",\r\n                            // We round up the current date time to be the start of the day, as the due date is inclusive\r\n                            todatetime(properties.remediationDueDate) >= bin(now(), 1d), \"OnTime\",\r\n                            \"Overdue\"\r\n                        ), dynamic(null))\r\n        | extend isGracePeriod = iff(type == \"microsoft.security/assessments/governanceassignments\", iff(govCompletionStatus == \"OnTime\", tobool(properties.isGracePeriod), false), dynamic(null))\r\n        | summarize \r\n                    statusPerInitiative = anyif(statusPerInitiative, isAssessment == 1),\r\n                    source = anyif(source, isAssessment == 1),\r\n                    assessmentKey = anyif(assessmentKey, isAssessment == 1),\r\n                    resourceId = anyif(resourceId, isAssessment == 1),\r\n                    displayName = anyif(displayName, isAssessment == 1),\r\n                    statusCode = anyif(statusCode, isAssessment == 1),\r\n                    maturityLevel = anyif(maturityLevel, isAssessment == 1),\r\n                    severity = anyif(severity, isAssessment == 1),\r\n                    severityNumber = anyif(severityNumber, isAssessment == 1),\r\n                    environment = anyif(environment, isAssessment == 1),\r\n                    isUnhealthy = anyif(isUnhealthy, isAssessment == 1),\r\n                    typeFullPath = anyif(typeFullPath, isAssessment == 1),\r\n                    dueDate = anyif(dueDate, isAssignment == 1),\r\n                    eta = anyif(eta, isAssignment == 1),\r\n                    isGracePeriod = anyif(isGracePeriod, isAssignment == 1),\r\n                    govCompletionStatus = anyif(govCompletionStatus, isAssignment == 1),\r\n                    hasAssignment = max(isAssignment),\r\n                    hasAssessmentData = sum(isAssessment) by idForSummarize\r\n        | where hasAssessmentData > 0\r\n        | mv-expand statusPerInitiative limit 400\r\n        | extend policyInitiativeName = tostring(statusPerInitiative.policyInitiativeName)\r\n| where ((policyInitiativeName =~ \"ASC Default\" or policyInitiativeName =~ \"ISO 27001:2013\" or policyInitiativeName =~ \"NIST SP 800 53 R5\"))\r\n        | extend now = now()\r\n        | extend completionStatus = case(\r\n            isUnhealthy == 0, \"Completed\", \r\n            govCompletionStatus == \"Overdue\", \"Overdue\",\r\n            govCompletionStatus == \"OnTime\", \"OnTime\",\r\n            \"Unassigned\")\r\n        | where ((completionStatus =~ \"Unassigned\"))\r\n        | extend completionStatusNumber = case(\r\n            completionStatus == \"Completed\", 0,\r\n            completionStatus in (\"Unassigned\", \"Unhealthy\"), 1,\r\n            completionStatus == \"OnTime\", 2,\r\n            completionStatus == \"Overdue\", 3,\r\n            -1)\r\n        | summarize initiatives = make_set_if(policyInitiativeName, isnotempty(policyInitiativeName)),\r\n                    //source = any(source),\r\n                    assessmentKey = any(assessmentKey),\r\n                    displayName = any(displayName),\r\n                    statusCode = any(statusCode),\r\n                    maturityLevel = any(maturityLevel),\r\n                    severity = any(severity),\r\n                    severityNumber = any(severityNumber),\r\n                    environment = any(environment),\r\n                    dueDate = any(dueDate),\r\n                    eta = any(eta),\r\n                    isGracePeriod = any(isGracePeriod),\r\n                    typeFullPath = any(typeFullPath),\r\n                    completionStatus = any(completionStatus),\r\n                    completionStatusNumber = any(completionStatusNumber) by idForSummarize\r\n        | summarize resourceCount = count(),\r\n                    environments = make_set(environment),\r\n                    displayName = any(displayName),\r\n                    maturityLevel = any(maturityLevel),\r\n                    initiatives = make_set(initiatives),\r\n                    resourceTypes = make_set(typeFullPath),\r\n                    severity = any(severity),\r\n                    severityNumber = any(severityNumber),\r\n                    dueDate = min(dueDate),\r\n                    eta = min(eta),\r\n                    isGracePeriod = iff(sum(isGracePeriod) > 0, 1, 0),\r\n                    completionStatusNumber = max(completionStatusNumber) by assessmentKey, statusCode\r\n        | extend statusAndCount = pack(\"statusCode\", statusCode, \"resourceCount\", resourceCount)\r\n        | summarize statusAndCount = make_list(statusAndCount),\r\n                    resourceCount = sum(resourceCount),\r\n                    environments = make_set(environments),\r\n                    displayName = any(displayName),\r\n                    maturityLevel = any(maturityLevel),\r\n                    initiatives = make_set(initiatives),\r\n                    severity = any(severity),\r\n                    severityNumber = any(severityNumber),\r\n                    dueDate = min(dueDate),\r\n                    eta = min(eta),\r\n                    isGracePeriod = iff(sum(isGracePeriod) > 0, 1, 0),\r\n                    resourceTypes = make_set(resourceTypes),\r\n                    completionStatusNumber = max(completionStatusNumber) by assessmentKey\r\n        | extend completionStatus = case(\r\n            completionStatusNumber == 0, \"Completed\",\r\n            completionStatusNumber == 1, \"Unassigned\",\r\n            completionStatusNumber == 2, \"OnTime\",\r\n            completionStatusNumber == 3, \"Overdue\",\r\n            \"Unknown\")\r\n        | order by severityNumber desc\r\n            | extend controlsData = dynamic([])\r\n            | order by severityNumber desc\r\n| project assessmentKey, resourceCount, environments, displayName, maturityLevel,\r\ninitiatives, severity, severityNumber, completionStatus, completionStatusNumber";
                SecurityRecommendationsAZR securityrecommendation = new SecurityRecommendationsAZR();
                var tenant = client.GetTenants().First();

                var queryContent = new ResourceQueryContent(strQuery);
                var response = tenant.GetResources(queryContent);
                var result = response.Value;
                var data = response.Value.Data.ToString();
                var listSecurityRecommendation = JsonConvert.DeserializeObject<List<SecurityRecommendationsAZR>>(data);

                return listSecurityRecommendation;
            }
            catch(Exception ex)
            {
                _logger.LogInformation(ex, "Security");
                throw;
            }
        }
    }
}
